@page "/addMed"
@page "/addMed/{Id:int}"


@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using kokos.Data
@using kokos.Models
@using kokos.Components.Account

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject AuthenticationStateProvider authenticationStateProvider
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NavigationManager
@inject DbHelperMethods db;


@if (isEdit)
{
    <h3>Edit Med</h3>
}
else{
    <h3>Add Med</h3>
}


<div class="row">
    <div class="col-sm-4">
        <EditForm Model="@med" OnSubmit="HandleSubmit" FormName="AddMed">
            <div class="mb-3">
                <label for="Name" class="form-label"> Name </label>
                <InputText id="name" @bind-Value="med.name" class="form-control" disabled="@isEdit"></InputText>
            </div>
            <div class="mb-3">
                <label for="med.medType" class="form-label"> Type of med </label>
                <InputSelect id="medType" @bind-Value="med.medType" class="form-select" disabled="@isEdit">
                    <option value="">Select Type</option>
                    @foreach (var medType in Enum.GetValues(typeof(MedType)).Cast<MedType>())
                    {
                        <option value="@medType.ToString()">@medType.ToString()</option>
                    }
                </InputSelect>

            </div>
            <div class="mb-3">
                <label for="med.dosageType" class="form-label"> Dosage </label>
                
                <InputSelect id="dosageType" @bind-Value="med.dosageType" class="form-control" disabled="@isEdit">
                    <option value="">Select Dosage</option>
                    @foreach (var dosageType in Enum.GetValues(typeof(DosageType)).Cast<DosageType>())
                    {
                        <option value="@dosageType.ToString()">@dosageType.ToString()</option>
                    }
                </InputSelect>
            </div> 

            <div class="mb-3">
                <label for="med.dosage" class="form-label"> Dosage amount </label>
                <InputNumber id="dosage" @bind-Value="med.dosage" class="form-control"></InputNumber>
            </div>

            <div class="mb-3">
                <label for="med.timeOfDay" class="form-label"> Dosage Time </label>
                <InputSelect id="dosageTime" @bind-Value="med.timeOfDay" class="form-control">
                    <option value="">Select Time</option>
                    @foreach (var dosageTime in Enum.GetValues(typeof(TimeOfDay)).Cast<TimeOfDay>())
                    {
                        <option value="@dosageTime.ToString()">@dosageTime.ToString()</option>
                    }
                </InputSelect>
            </div>
            <button style="background-color: #8e44ad; border: none" type="submit" class="btn btn-primary">Submit</button>
            <button style="background-color: #8e44ad; border: none" type="button" class="btn btn-secondary" @onclick="(() => Cancel())">Cancel</button>
        </EditForm>
    </div>
</div>

@code {

    [Parameter]
    public int? Id { get; set; }

    private ClaimsPrincipal user;
    private string userId;
    private PatientInfo pInfo = new();
    private Medication medication = new();
    bool isEdit = false;

    private CompleteMed? med = new();


    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);
            userId = userIdClaim?.Value;
        }
    }




    protected override void OnParametersSet()
    {
        if (Id is not null)
        {
            isEdit = true;
            PatientsMeds x = db.GetPatientMed(Id.Value);
            Medication y = db.GetMed(x.MedId);
            med.name = y.Name;
            med.medType = y.medType;
            med.dosageType = y.dosageType;
            med.dosage = x.Dosage;
            med.timeOfDay = x.Time;
        }
    }



    private void HandleSubmit()
    {
        if (isEdit)
        {
            PatientsMeds pMed = new PatientsMeds();
            pMed.UserId = userId;
            pMed.MedId = db.GetMedId(med.name);
            pMed.Dosage = med.dosage;
            pMed.Time = med.timeOfDay;

            db.DeletePatientMed(Id.Value);
            db.AddPatientsMed(pMed);
            NavigationManager.NavigateTo("/meds");
        }
        else
        {
            if (db.DoesMedExist(med.name))
            {
                var medId2 = db.GetMedId(med.name);

                PatientsMeds patientMed = new PatientsMeds();
                patientMed.MedId = medId2;
                patientMed.UserId = userId;
                patientMed.Dosage = med.dosage;
                patientMed.Time = med.timeOfDay;

                db.AddPatientsMed(patientMed);

                NavigationManager.NavigateTo("/meds");

            }
            else
            {
              medication.Name = med.name;
              medication.medType = med.medType;
              medication.dosageType = med.dosageType;
              db.AddMed(medication);

              int medId = db.GetMedId(medication.Name);

              PatientsMeds patientMed = new PatientsMeds();
              patientMed.MedId = medId;
              patientMed.UserId = userId;
              patientMed.Dosage = med.dosage;
              patientMed.Time = med.timeOfDay;

              db.AddPatientsMed(patientMed);

              NavigationManager.NavigateTo("/meds");  
            }
             
        }

        
    }


    private void Cancel()
    {
        NavigationManager.NavigateTo("/meds");
    }


    private class CompleteMed
    {
        public string name { get; set; }
        public MedType medType { get; set; }
        public DosageType dosageType { get; set; }
        public int dosage { get; set; }
        public TimeOfDay timeOfDay { get; set; }
    }
}
