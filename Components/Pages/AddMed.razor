@page "/addMed"
@page "/addMed/{Id:int}"


@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using kokos.Data
@using kokos.Models
@using kokos.Components.Account

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject AuthenticationStateProvider authenticationStateProvider
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NavigationManager
@inject DbHelperMethods db;


@if (isEdit)
{
    <h3>Edytuj lek</h3>
}
else
{
    <h3>Dodaj lek</h3>
}


<div class="row">
    <div class="col-sm-4">
        <EditForm Model="@med" OnSubmit="HandleSubmit" FormName="AddMed">
            <div class="mb-3">
                <label for="Name" class="form-label"> Nazwa </label>
                <InputText id="name" @bind-Value="med.Name" class="form-control"></InputText>
            </div>

            <div class="mb-3">
                <label for="Medication" class="form-label">Rodzaj leku</label>
                <InputSelect id="@med.Id" @bind-Value="@med.medType" class="form-select">
                    @foreach (var medType in Enum.GetValues(typeof(MedType)))
                    {
                        <option value="@medType">@medType</option>
                    }
                </InputSelect>

            </div>
            <div class="mb-3">
                <label for="Medication" class="form-label"> Rodzaj dawki </label>
                <InputSelect id="@med.Id" @bind-Value="@med.dosageType" class="form-select">
                    <option value="">Wybierz rodzaj</option>
                    @foreach (var dosageType in Enum.GetValues(typeof(DosageType)).Cast<DosageType>())
                    {
                        <option value="@dosageType">@dosageType.ToString()</option>
                    }
                </InputSelect>
                @* <label for="med.dosageType" class="form-label"> Rodzaj dawki </label>

                <InputSelect id="DosageType" @bind-Value="med.dosageType" class="form-control" disabled="@isEdit">
                <option value="">Wybierz dawkę</option>
                @foreach (var dosageType in Enum.GetValues(typeof(DosageType)).Cast<DosageType>())
                {
                <option value="@dosageType.ToString()">@dosageType.ToString()</option>
                }
                </InputSelect> *@
            </div>

            <div class="mb-3">
                <label for="med.Dosage" class="form-label">Dawka</label>
                <InputNumber id="dosage" @bind-Value="med.Dosage" class="form-control"></InputNumber>
            </div>

            <div class="mb-3">
                <label for="med.Time" class="form-label"> Pora dnia zazywania leku </label>
                <InputSelect id="dosageTime" @bind-Value="med.Time" class="form-control">
                    <option value="">wybierz pore dnia</option>
                    @foreach (var dosageTime in Enum.GetValues(typeof(TimeOfDay)).Cast<TimeOfDay>())
                    {
                        <option value="@dosageTime.ToString()">@dosageTime.ToString()</option>
                    }
                </InputSelect>
            </div>
            <button style="background-color: #8e44ad; border: none" type="submit"
                class="btn btn-primary">Akceptuj</button>
            <button style="background-color: #8e44ad; border: none" type="button" class="btn btn-secondary"
                @onclick="(() => Cancel())">Anuluj</button>
        </EditForm>
    </div>
</div>

@code {

    [Parameter]
    public int? Id { get; set; }

    private ClaimsPrincipal user;
    private string userId;
    private PatientInfo pInfo = new();
    bool isEdit = false;

    private Medication? med = new();


    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);
            userId = userIdClaim?.Value;
        }
    }


    protected override void OnParametersSet()
    {
        if (Id is not null)
        {
            isEdit = true;
            med = db.GetMed(Id.Value);
        }
    }



    private void HandleSubmit()
    {
        if (isEdit)
        {
            db.EditMed(med);
            NavigationManager.NavigateTo("/meds");
        }
        else
        {
            med.userId = userId;
            med.Taken = true;
            db.AddMed(med);
            NavigationManager.NavigateTo("/meds");
        }
    }


    private void Cancel()
    {
        NavigationManager.NavigateTo("/meds");
    }
}
